{"version":3,"sources":["../../src/nativeDialog.tsx","../../src/dialogProvider.tsx","content.js","customDialog.js","App.js","index.js"],"names":["NativeDialog","props","message","type","defaultText","onSubmit","onCancel","open","useEffect","window","result","DialogContext","React","DialogProvider","children","dialogComponent","submitLabel","cancelLabel","dialogState","setDialogState","awaitingPromiseRef","dialog","options","Promise","resolve","reject","DialogComponent","value","alert","confirm","prompt","Content","useState","setValue","alertClick","useCallback","e","preventDefault","then","catch","confirmClick","promptClick","onClick","JSON","stringify","CustomDialog","title","ReactModal","setAppElement","isOpen","setIsOpen","altTitle","replace","c","toUpperCase","undefined","change","target","submit","close","style","overlay","backgroundColor","content","position","width","height","top","left","transform","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEsc","margin","defaultValue","onChange","App","language","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6f7403f.chunk.js","sourcesContent":["import { IDialogProps, DialogTypes } from './types'\nimport React, { useEffect } from 'react'\n\ninterface INativeDialogProps extends IDialogProps {\n  message: string\n}\n\nexport const NativeDialog: React.ElementType<INativeDialogProps> = (props) => {\n  const { message, type, defaultText, onSubmit, onCancel, open } = props\n\n  useEffect(() => {\n    if (!message || !open) return\n    switch (type) {\n      case DialogTypes.Alert: {\n        window.alert(message)\n        if (typeof onSubmit === 'function') {\n          onSubmit(true)\n        }\n        break\n      }\n      case DialogTypes.Confirm: {\n        const result = window.confirm(message)\n        if (typeof onSubmit === 'function' && result) {\n          onSubmit(result)\n        }\n        if (typeof onCancel === 'function' && !result) onCancel()\n        break\n      }\n      case DialogTypes.Prompt: {\n        const result = window.prompt(message, defaultText)\n        if (typeof onSubmit === 'function' && result) {\n          onSubmit(result)\n        }\n        if (typeof onCancel === 'function' && !result) onCancel()\n        break\n      }\n      default:\n    }\n    // setOpen(false)\n  }, [message, type, defaultText, onSubmit, onCancel])\n\n  return null\n}\n","import * as React from 'react'\nimport {\n  IDialogContextProps,\n  IDialogProviderProps,\n  IDialogProps,\n  DialogTypes,\n} from './types'\nimport { NativeDialog } from './nativeDialog'\n\nexport const DialogContext = React.createContext<Partial<IDialogContextProps>>(\n  {}\n)\n\nexport const DialogProvider: React.FC<IDialogProviderProps> = ({\n  children,\n  dialogComponent,\n  submitLabel = 'OK',\n  cancelLabel = 'Cancel',\n}) => {\n  const [dialogState, setDialogState] = React.useState<Partial<IDialogProps>>()\n  const awaitingPromiseRef = React.useRef<any>()\n\n  const dialog = (options: IDialogProps): Promise<any> => {\n    setDialogState(options)\n    return new Promise((resolve, reject) => {\n      awaitingPromiseRef.current = { resolve, reject }\n    })\n  }\n\n  const alert = (message: string | React.ElementType): Promise<null> => {\n    const alertOptions = {\n      message,\n      type: DialogTypes.Alert,\n      open: true,\n      submitLabel,\n    }\n    return dialog(alertOptions)\n  }\n\n  const confirm = (message: string | React.ElementType): Promise<boolean> => {\n    const confirmOptions = {\n      type: DialogTypes.Confirm,\n      message,\n      submitLabel,\n      cancelLabel,\n      open: true,\n    }\n    return dialog(confirmOptions)\n  }\n\n  const prompt = (\n    message: string | React.ElementType,\n    defaultText?: string\n  ): Promise<string> => {\n    const promptOptions = {\n      type: DialogTypes.Prompt,\n      message,\n      defaultText,\n      submitLabel,\n      cancelLabel,\n      open: true,\n    }\n    return dialog(promptOptions)\n  }\n\n  const handleCancel = () => {\n    awaitingPromiseRef.current && awaitingPromiseRef.current.reject()\n    setDialogState(undefined)\n  }\n\n  const handleSubmit = (value?: any) => {\n    awaitingPromiseRef.current && awaitingPromiseRef.current.resolve(value)\n    setDialogState(undefined)\n  }\n\n  const DialogComponent = dialogComponent || NativeDialog\n\n  return (\n    <DialogContext.Provider value={{ alert, confirm, dialog, prompt }}>\n      {children}\n      <DialogComponent\n        open={!!dialogState}\n        onSubmit={handleSubmit}\n        onCancel={handleCancel}\n        {...dialogState}\n      />\n    </DialogContext.Provider>\n  )\n}\n\nexport const useDialog = (): Partial<IDialogContextProps> =>\n  React.useContext(DialogContext)\n","import React, { useCallback, useState } from 'react'\nimport { useDialog } from '@datnq/usedialog'\n\nconst Content = () => {\n  const { alert, confirm, prompt } = useDialog()\n  const [value, setValue] = useState()\n\n  const alertClick = useCallback(\n    (e) => {\n      e.preventDefault()\n      alert('Alert clicked!')\n        .then(setValue)\n        .catch(() => setValue(false))\n    },\n    [alert]\n  )\n  const confirmClick = useCallback(\n    (e) => {\n      e.preventDefault()\n      confirm('Confirm clicked!')\n        .then(setValue)\n        .catch(() => setValue(false))\n    },\n    [confirm]\n  )\n  const promptClick = useCallback(\n    (e) => {\n      e.preventDefault()\n      prompt('Prompt clicked!', 'This is default value')\n        .then(setValue)\n        .catch(() => setValue(false))\n    },\n    [prompt]\n  )\n  return (\n    <div>\n      <p>\n        <button onClick={alertClick}>Alert</button>\n        <button onClick={confirmClick}>Confirm</button>\n        <button onClick={promptClick}>Prompt</button>\n      </p>\n      <p>&nbsp;{JSON.stringify(value)}</p>\n    </div>\n  )\n}\n\nexport default Content\n","import React, { useState, useCallback, useEffect } from 'react'\nimport ReactModal from 'react-modal'\n\nconst CustomDialog = ({\n  message,\n  defaultText,\n  type,\n  title,\n  open,\n  onSubmit,\n  onCancel,\n  submitLabel,\n  cancelLabel,\n}) => {\n  ReactModal.setAppElement('#root')\n\n  const [isOpen, setIsOpen] = useState(open)\n  const [value, setValue] = useState(defaultText)\n\n  const altTitle = type\n    ? type.replace(/^\\w/, (c) => c.toUpperCase())\n    : undefined\n\n  const change = useCallback((e) => {\n    setValue(e.target.value)\n  }, [])\n\n  const submit = useCallback(() => {\n    onSubmit(type !== 'prompt' || value)\n  }, [onSubmit, type, value])\n\n  const close = useCallback(() => {\n    onCancel()\n  }, [onCancel])\n\n  useEffect(() => {\n    setIsOpen(open)\n  }, [open])\n\n  useEffect(() => {\n    setValue(defaultText)\n  }, [defaultText])\n\n  return (\n    <ReactModal\n      isOpen={isOpen}\n      style={{\n        overlay: {\n          backgroundColor: 'rgba(0,0,0,.5)',\n        },\n        content: {\n          position: 'absolute',\n          width: '250px',\n          height: 'min-content',\n          top: '40%',\n          left: '50%',\n          transform: 'translate(-50%, -50%)',\n        },\n      }}\n      onRequestClose={close}\n      shouldCloseOnOverlayClick\n      shouldCloseOnEsc\n    >\n      {(title || altTitle) && (\n        <header>\n          <h1 style={{ margin: 0 }}>{title || altTitle}</h1>\n        </header>\n      )}\n      <div>\n        <p>{message}</p>\n        {type === 'prompt' && (\n          <p>\n            <input defaultValue={defaultText} onChange={change} />\n          </p>\n        )}\n      </div>\n      <button onClick={submit}>{submitLabel}</button>\n      {(type === 'prompt' || type === 'confirm') && (\n        <button onClick={close}>{cancelLabel}</button>\n      )}\n    </ReactModal>\n  )\n}\n\nexport default CustomDialog\n","import React from 'react'\nimport { Prism } from 'react-syntax-highlighter'\nimport { DialogProvider } from '@datnq/usedialog'\nimport Content from './content'\nimport CustomDialog from './customDialog'\n\nconst App = () => {\n  return (\n    <>\n      <DialogProvider>\n        <h1>Native Dialog</h1>\n        <Content />\n      </DialogProvider>\n      <hr />\n      <DialogProvider\n        dialogComponent={CustomDialog}\n        submitLabel='Yes'\n        cancelLabel='No'\n      >\n        <h1>React Dialog</h1>\n        <Content />\n        <h2>Custom dialog component</h2>\n        <Prism language='jsx'>\n          {`import React, { useState, useCallback, useEffect } from 'react'\nimport ReactModal from 'react-modal'\n\nconst CustomDialog = ({ message, defaultText, type, title, open, onSubmit, onCancel, submitLabel, cancelLabel }) => {\n  ReactModal.setAppElement('#root')\n\n  const [isOpen, setIsOpen] = useState(open)\n  const [value, setValue] = useState(defaultText)\n\n  const change = useCallback((e) => {\n    setValue(e.target.value)\n  }, [])\n\n  const submit = useCallback(() => {\n    onSubmit(type !== 'prompt' || value)\n  }, [onSubmit, type, value])\n\n  const close = useCallback(() => {\n    onCancel()\n  }, [onCancel])\n\n  useEffect(() => {\n    setIsOpen(open)\n  }, [open])\n\n  useEffect(() => {\n    setValue(defaultText)\n  }, [defaultText])\n\n  const renderTitle = () => {\n    const altTitle = type ? type.replace(/^\\\\w/, (c) => c.toUpperCase()) : undefined\n    if (!title && !altTitle) return\n\n    return <header>{title || altTitle}</header>\n  }\n\n  const isPrompt = type === 'prompt'\n  const hasClose = type === 'prompt' || type === 'confirm'\n\n  return (\n    <ReactModal isOpen={isOpen} style={{ /* ... */ }} onRequestClose={close} shouldCloseOnOverlayClick shouldCloseOnEsc >\n      {renderTitle()}\n      <div>\n        <p>{message}</p>\n        {isPrompt && (\n          <p>\n            <input defaultValue={defaultText} onChange={change} />\n          </p>\n        )}\n      </div>\n      <button onClick={submit}>{submitLabel}</button>\n      {hasClose && (\n        <button onClick={close}>{cancelLabel}</button>\n      )}\n    </ReactModal>\n  )\n}\n\nexport default CustomDialog\n`}\n        </Prism>\n      </DialogProvider>\n    </>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}